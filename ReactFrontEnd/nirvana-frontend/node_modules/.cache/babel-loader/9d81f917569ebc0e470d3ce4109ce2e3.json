{"ast":null,"code":"import _slicedToArray from \"/home/raj/Desktop/Data/Nirvana/alpha-testing-branch/Nirvana/ReactFrontEnd/nirvana-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/raj/Desktop/Data/Nirvana/alpha-testing-branch/Nirvana/ReactFrontEnd/nirvana-frontend/src/components/datapicker.js\";\nimport 'date-fns';\nimport React, { useState, useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { WeatherContext } from '../Contexts/weather_context';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport { TextField, Button } from '@material-ui/core';\nimport cookie from 'react-cookies';\nimport axios, * as others from 'axios';\nimport { api_gateway_url } from \"../constants/constants\";\nexport default function DatePickers() {\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        from_date = _useState2[0],\n        setFromDate = _useState2[1];\n\n  const _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        to_date = _useState4[0],\n        setToDate = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        city_name = _useState6[0],\n        setCityName = _useState6[1];\n\n  const _useContext = useContext(WeatherContext),\n        _useContext2 = _slicedToArray(_useContext, 2),\n        dailyWeather = _useContext2[0],\n        setWeather = _useContext2[1];\n\n  const updateFromDate = date => {\n    setFromDate(Date.parse(date));\n  };\n\n  const updateToDate = date => {\n    setToDate(Date.parse(date));\n  };\n\n  const updateCityName = e => {\n    setCityName(e.target.value);\n  };\n\n  let lat = 0;\n  let lon = 0;\n  let temprature = [1];\n  let precipitation = [1];\n  let humidity = [1];\n  let windSpeed = [1];\n\n  const getData = (headers, payload, new_from_date, new_to_date) => {\n    fetch(api_gateway_url + 'retrieveData', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload),\n      async: true\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          console.log(\"response 1 data\");\n          console.log(json);\n          lat = json.latitude;\n          lon = json.longitude; // make array of data\n\n          setWeather(json);\n        });\n        let dataToSend = {\n          from_date: JSON.stringify({\n            year: new_from_date.getFullYear(),\n            month: new_from_date.getMonth() + 1,\n            day: new_from_date.getDate()\n          }),\n          to_date: JSON.stringify({\n            year: new_to_date.getFullYear(),\n            month: new_to_date.getMonth() + 1,\n            day: new_to_date.getDate()\n          }),\n          city_name: city_name,\n          records: JSON.stringify({\n            temprature: temprature,\n            precipitation: precipitation,\n            humidity: humidity,\n            wind_speed: windSpeed\n          })\n        };\n        getDataFuture(headers, {\n          \"lat\": lat,\n          \"lon\": lon\n        }, dataToSend);\n      } else {\n        console.log(\"server error -- response 1\");\n      }\n    });\n  };\n\n  const getDataViz = (headers, payload) => {\n    fetch(api_gateway_url + 'retrieveDataViz', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload),\n      async: true\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          console.log(\"response 3 data\");\n          console.log(json); // make array of data\n        });\n      } else {\n        console.log(\"server error -- response 3\");\n      }\n    });\n  };\n\n  const getDataFuture = (headers, payload, payload_for_viz) => {\n    console.log(payload);\n    fetch(api_gateway_url + 'retrieveDataFuture', {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload),\n      async: true\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          console.log(\"response 2 data\");\n          console.log(json); // make array of data\n        });\n        getDataViz(headers, payload_for_viz);\n      } else {\n        console.log(\"server error -- response 2\");\n      }\n    });\n  };\n\n  const handleDataRetrieval = () => {\n    console.log(from_date);\n    const jwt = cookie.load('jwt');\n    const session_id = cookie.load('session_id');\n    var new_from_date = new Date(from_date);\n    var new_to_date = new Date(to_date);\n    var email = cookie.load(\"email\");\n    const payload = {\n      from_date: JSON.stringify({\n        year: new_from_date.getFullYear(),\n        month: new_from_date.getMonth() + 1,\n        day: new_from_date.getDate()\n      }),\n      to_date: JSON.stringify({\n        year: new_to_date.getFullYear(),\n        month: new_to_date.getMonth() + 1,\n        day: new_to_date.getDate()\n      }),\n      city_name: city_name\n    };\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'email': email,\n      'Authorization': jwt,\n      // insert session id here\n      'session_id': session_id\n    };\n    console.log(payload);\n    let session_payload = {\n      \"user_action\": city_name + \" \" + new_from_date + \" \" + new_to_date\n    };\n    getData(headers, payload, new_from_date, new_to_date);\n  };\n\n  return React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"outlined-basic\",\n    label: \"Search City\",\n    onChange: updateCityName,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    justify: \"space-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(KeyboardDatePicker, {\n    margin: \"normal\",\n    id: \"date-picker-dialog\",\n    name: \"from_date\",\n    label: \"Date picker dialog\",\n    format: \"MM/dd/yyyy\",\n    value: from_date || new Date(),\n    onChange: updateFromDate,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), React.createElement(KeyboardDatePicker, {\n    margin: \"normal\",\n    id: \"date-picker-dialog\",\n    name: \"to_date\",\n    label: \"Date picker dialog\",\n    format: \"MM/dd/yyyy\",\n    value: to_date || new Date(),\n    onChange: updateToDate,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleDataRetrieval,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["/home/raj/Desktop/Data/Nirvana/alpha-testing-branch/Nirvana/ReactFrontEnd/nirvana-frontend/src/components/datapicker.js"],"names":["React","useState","useContext","Grid","DateFnsUtils","WeatherContext","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","TextField","Button","cookie","axios","others","api_gateway_url","DatePickers","Date","from_date","setFromDate","to_date","setToDate","city_name","setCityName","dailyWeather","setWeather","updateFromDate","date","parse","updateToDate","updateCityName","e","target","value","lat","lon","temprature","precipitation","humidity","windSpeed","getData","headers","payload","new_from_date","new_to_date","fetch","method","body","JSON","stringify","async","then","response","ok","json","console","log","latitude","longitude","dataToSend","year","getFullYear","month","getMonth","day","getDate","records","wind_speed","getDataFuture","getDataViz","payload_for_viz","handleDataRetrieval","jwt","load","session_id","email","session_payload"],"mappings":"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","sourcesContent":["import 'date-fns';\nimport React, {useState, useContext} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {WeatherContext} from '../Contexts/weather_context';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { TextField, Button } from '@material-ui/core';\nimport cookie from 'react-cookies'\nimport axios, * as others from 'axios';\nimport { api_gateway_url } from \"../constants/constants\";\nexport default function DatePickers() {\n  const [from_date, setFromDate] = useState(new Date());\n  const [to_date, setToDate] = useState(new Date());\n  const [city_name, setCityName] = useState('');\n  const [dailyWeather, setWeather] = useContext(WeatherContext);\n\nconst updateFromDate = date => {\n  setFromDate(Date.parse(date));\n}\n\n\nconst updateToDate = date => {\n  setToDate(Date.parse(date));\n}\n\n\nconst updateCityName = e => {\n  setCityName(e.target.value);\n}\n\n\nlet lat = 0;\nlet lon = 0;\nlet temprature  = [1];\nlet precipitation = [1];\nlet humidity = [1];\nlet windSpeed = [1];\nconst getData = (headers, payload, new_from_date, new_to_date)=>{\n  fetch(api_gateway_url + 'retrieveData', {\n    method: 'POST',\n    headers: headers,\n    body:JSON.stringify(payload),\n    async:true\n  }).then(response => {\n    if (response.ok) {\n      response.json().then(json => {\n        console.log(\"response 1 data\")\n        console.log(json)\n        lat = json.latitude\n        lon = json.longitude\n        // make array of data\n        setWeather(json)\n      });\n      let dataToSend = {\n        from_date: JSON.stringify({\n          year: new_from_date.getFullYear(),\n          month: new_from_date.getMonth()+1,\n          day: new_from_date.getDate()\n        }),\n        to_date: JSON.stringify({\n          year: new_to_date.getFullYear(),\n          month: new_to_date.getMonth()+1,\n          day: new_to_date.getDate()\n        }),\n        city_name: city_name,\n        records: JSON.stringify({\n          temprature : temprature,\n          precipitation : precipitation,\n          humidity : humidity,\n          wind_speed : windSpeed\n        })\n      }\n      getDataFuture(headers,{\"lat\":lat, \"lon\":lon},dataToSend)\n\n    }\n    else {\n      console.log(\"server error -- response 1\")\n    }\n  })\n}\n\n\nconst getDataViz = (headers, payload)=>{\n  fetch(api_gateway_url + 'retrieveDataViz', {\n    method: 'POST',\n    headers: headers,\n    body:JSON.stringify(payload),\n    async:true\n  }).then(response => {\n    if (response.ok) {\n      response.json().then(json => {\n        console.log(\"response 3 data\")\n        console.log(json)\n        // make array of data\n      });\n    }\n    else {\n      console.log(\"server error -- response 3\")\n    }\n  })\n}\n\n\nconst getDataFuture = (headers, payload,payload_for_viz) => {\n  console.log(payload)\n  fetch(api_gateway_url + 'retrieveDataFuture', {\n    method: 'POST',\n    headers: headers,\n    body:JSON.stringify(payload),\n    async:true\n  }).then(response => {\n    if (response.ok) {\n      response.json().then(json => {\n        console.log(\"response 2 data\")\n        console.log(json)\n        \n        // make array of data\n      });\n      getDataViz(headers,payload_for_viz)\n    }\n    else {\n      console.log(\"server error -- response 2\")\n    }\n  })\n}\n\nconst handleDataRetrieval = ()=>{\n  console.log(from_date)\n  const jwt = cookie.load('jwt');\n\n  const session_id = cookie.load('session_id');\n\n  var new_from_date = new Date(from_date)\n  var new_to_date = new Date(to_date)\n  var email = cookie.load(\"email\")\n  const payload = {\n    from_date: JSON.stringify({\n      year: new_from_date.getFullYear(),\n      month: new_from_date.getMonth()+1,\n      day: new_from_date.getDate()\n    }),\n    to_date: JSON.stringify({\n      year: new_to_date.getFullYear(),\n      month: new_to_date.getMonth()+1,\n      day: new_to_date.getDate()\n    }),\n    city_name: city_name\n  }\n  const headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'email': email,\n    'Authorization': jwt,\n    // insert session id here\n    'session_id': session_id\n  }\n  console.log(payload);\n  let session_payload = {\n    \"user_action\": city_name + \" \" + new_from_date + \" \" + new_to_date,\n  }\n\n  getData(headers, payload, new_from_date, new_to_date);\n}\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    \n    <TextField id=\"outlined-basic\" \n      label=\"Search City\" \n      onChange={updateCityName}\n      variant=\"outlined\"/>\n\n      <Grid container justify=\"space-around\">\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"date-picker-dialog\"\n          name = \"from_date\"\n          label=\"Date picker dialog\"\n          format=\"MM/dd/yyyy\"\n          value={from_date || new Date()}\n          onChange={updateFromDate}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"date-picker-dialog\"\n          name = \"to_date\"\n          label=\"Date picker dialog\"\n          format=\"MM/dd/yyyy\"\n          value={to_date || new Date()}\n          onChange={updateToDate}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleDataRetrieval}>\n          Submit\n        </Button>\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}